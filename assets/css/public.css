html {
  font-family: 'proxima-nova', sans-serif;
  font-weight: 400; }

.scanner__count {
  font-family: 'gnuolane', sans-serif;
  font-weight: 400;
  letter-spacing: 0.09rem;
  text-transform: uppercase; }

html {
  box-sizing: border-box;
  font-size: 16px;
  line-height: 1.5;
  min-height: 100%;
  height: 100%;
  overflow-y: scroll; }

body {
  margin: 0;
  height: 100%; }

*, *:before, *:after {
  box-sizing: inherit; }

[tabindex="-1"]:focus {
  outline: none !important; }

h1, h2, h3, h4, h5, h6 {
  line-height: 1.1;
  margin-top: 0;
  margin-bottom: 1rem; }

h1 {
  font-size: 2.5rem; }

h2 {
  font-size: 2rem; }

h3 {
  font-size: 1.75rem; }

h4 {
  font-size: 1.5rem; }

h5 {
  font-size: 1.25rem; }

h6 {
  font-size: 1rem; }

p {
  margin-top: 0;
  margin-bottom: 1rem; }

address {
  font-style: normal;
  line-height: inherit; }

ol,
ul,
dl {
  margin-top: 0;
  margin-bottom: 1rem; }

ol ol,
ul ul,
ol ul,
ul ol {
  margin-bottom: 0; }

dd {
  margin-bottom: .5rem;
  margin-left: 0; }

blockquote {
  margin: 0 0 1rem; }

pre {
  margin-top: 0;
  margin-bottom: 1rem; }

figure {
  margin: 0 0 1rem; }

img {
  display: block;
  vertical-align: middle;
  max-width: 100%;
  height: auto; }

[role="button"] {
  cursor: pointer; }

th {
  text-align: left; }

label {
  display: inline-block;
  margin-bottom: .5rem; }
  label abbr[title="required"] {
    border-bottom: none; }

input,
button,
select,
textarea {
  margin: 0;
  line-height: inherit;
  border-radius: 0; }
  input:focus,
  button:focus,
  select:focus,
  textarea:focus {
    outline: none; }

input.full {
  margin-top: 1rem;
  padding: 1rem;
  width: 100%;
  border: 1px solid #ccc; }

textarea {
  resize: vertical; }
  textarea.full {
    margin-bottom: 1rem;
    padding: 1rem;
    width: 100%;
    border-color: #ccc; }

fieldset {
  min-width: 0;
  padding: 0;
  margin: 0;
  border: 0; }

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: .5rem;
  font-size: 1.5rem;
  line-height: inherit; }

input[type="search"] {
  box-sizing: inherit;
  -webkit-appearance: none; }

a {
  color: #ad9885; }
  a:hover, a:focus {
    color: #000; }

hr {
  margin-top: 2.5rem;
  margin-bottom: 2.5rem;
  border: 0;
  border-top: 1px solid #ccc; }

.hidden {
  display: none; }

.layout {
  display: flex;
  display: -ms-flex;
  display: -webkit-flex;
  display: -moz-flex;
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  box-sizing: content-box;
  max-width: 76rem;
  padding: 5rem;
  height: 100%; }
  .layout:after {
    content: ' ';
    display: block;
    clear: both; }
  .layout *, .layout *:before, .layout *:after {
    box-sizing: border-box; }
  .layout--full-bleed {
    padding: 0; }
  .layout--success {
    background-color: #328760; }
  .layout--error {
    background-color: #cb2026; }
  .layout--welcome {
    background-color: #ad9885; }
  .layout__footer {
    position: relative; }

.gallery {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto; }
  .gallery:after {
    content: " ";
    display: block;
    clear: both; }
  .gallery--two > * {
    margin-bottom: 1.5rem; }
    @media (min-width: 48rem) {
      .gallery--two > * {
        width: 48.57143%;
        float: left;
        margin: 0 0 2.85714% 0; }
        .gallery--two > *:nth-child(2n + 1) {
          margin-left: 0;
          margin-right: -100%;
          clear: both;
          margin-left: 0; }
        .gallery--two > *:nth-child(2n + 2) {
          margin-left: 51.42857%;
          margin-right: -100%;
          clear: none; } }
  .gallery--three > * {
    margin-bottom: 1.5rem; }
    @media (min-width: 23rem) {
      .gallery--three > * {
        width: 48.57143%;
        float: left;
        margin: 0 0 2.85714% 0; }
        .gallery--three > *:nth-child(2n + 1) {
          margin-left: 0;
          margin-right: -100%;
          clear: both;
          margin-left: 0; }
        .gallery--three > *:nth-child(2n + 2) {
          margin-left: 51.42857%;
          margin-right: -100%;
          clear: none; } }
    @media (min-width: 62rem) {
      .gallery--three > * {
        width: 31.42857%;
        float: left; }
        .gallery--three > *:nth-child(3n + 1) {
          margin-left: 0;
          margin-right: -100%;
          clear: both;
          margin-left: 0; }
        .gallery--three > *:nth-child(3n + 2) {
          margin-left: 34.28571%;
          margin-right: -100%;
          clear: none; }
        .gallery--three > *:nth-child(3n + 3) {
          margin-left: 68.57143%;
          margin-right: -100%;
          clear: none; } }
  .gallery--four > * {
    margin-bottom: 1.5rem; }
    @media (min-width: 23rem) {
      .gallery--four > * {
        width: 48.57143%;
        float: left;
        margin: 0 0 2.85714% 0; }
        .gallery--four > *:nth-child(2n + 1) {
          margin-left: 0;
          margin-right: -100%;
          clear: both;
          margin-left: 0; }
        .gallery--four > *:nth-child(2n + 2) {
          margin-left: 51.42857%;
          margin-right: -100%;
          clear: none; } }
    @media (min-width: 48rem) {
      .gallery--four > * {
        width: 31.42857%;
        float: left; }
        .gallery--four > *:nth-child(3n + 1) {
          margin-left: 0;
          margin-right: -100%;
          clear: both;
          margin-left: 0; }
        .gallery--four > *:nth-child(3n + 2) {
          margin-left: 34.28571%;
          margin-right: -100%;
          clear: none; }
        .gallery--four > *:nth-child(3n + 3) {
          margin-left: 68.57143%;
          margin-right: -100%;
          clear: none; } }
    @media (min-width: 62rem) {
      .gallery--four > * {
        width: 22.85714%;
        float: left; }
        .gallery--four > *:nth-child(4n + 1) {
          margin-left: 0;
          margin-right: -100%;
          clear: both;
          margin-left: 0; }
        .gallery--four > *:nth-child(4n + 2) {
          margin-left: 25.71429%;
          margin-right: -100%;
          clear: none; }
        .gallery--four > *:nth-child(4n + 3) {
          margin-left: 51.42857%;
          margin-right: -100%;
          clear: none; }
        .gallery--four > *:nth-child(4n + 4) {
          margin-left: 77.14286%;
          margin-right: -100%;
          clear: none; } }
  .gallery--six > * {
    margin-bottom: 1.5rem; }
    @media (min-width: 34rem) {
      .gallery--six > * {
        width: 31.42857%;
        float: left;
        margin: 0 0 2.85714% 0; }
        .gallery--six > *:nth-child(3n + 1) {
          margin-left: 0;
          margin-right: -100%;
          clear: both;
          margin-left: 0; }
        .gallery--six > *:nth-child(3n + 2) {
          margin-left: 34.28571%;
          margin-right: -100%;
          clear: none; }
        .gallery--six > *:nth-child(3n + 3) {
          margin-left: 68.57143%;
          margin-right: -100%;
          clear: none; } }
    @media (min-width: 48rem) {
      .gallery--six > * {
        width: 31.42857%;
        float: left; }
        .gallery--six > *:nth-child(3n + 1) {
          margin-left: 0;
          margin-right: -100%;
          clear: both;
          margin-left: 0; }
        .gallery--six > *:nth-child(3n + 2) {
          margin-left: 34.28571%;
          margin-right: -100%;
          clear: none; }
        .gallery--six > *:nth-child(3n + 3) {
          margin-left: 68.57143%;
          margin-right: -100%;
          clear: none; } }
    @media (min-width: 62rem) {
      .gallery--six > * {
        width: 14.28571%;
        float: left; }
        .gallery--six > *:nth-child(6n + 1) {
          margin-left: 0;
          margin-right: -100%;
          clear: both;
          margin-left: 0; }
        .gallery--six > *:nth-child(6n + 2) {
          margin-left: 17.14286%;
          margin-right: -100%;
          clear: none; }
        .gallery--six > *:nth-child(6n + 3) {
          margin-left: 34.28571%;
          margin-right: -100%;
          clear: none; }
        .gallery--six > *:nth-child(6n + 4) {
          margin-left: 51.42857%;
          margin-right: -100%;
          clear: none; }
        .gallery--six > *:nth-child(6n + 5) {
          margin-left: 68.57143%;
          margin-right: -100%;
          clear: none; }
        .gallery--six > *:nth-child(6n + 6) {
          margin-left: 85.71429%;
          margin-right: -100%;
          clear: none; } }

.scanner__header {
  padding: 1rem;
  white-space: nowrap; }

.scanner__logo, .scanner__count {
  display: inline-block;
  vertical-align: middle;
  width: 50%; }

.scanner__count {
  font-size: 1.5rem;
  font-weight: 600;
  text-transform: uppercase;
  text-align: right; }

.scanner__bin, .scanner__item, .scanner__welcome {
  color: #fff; }

.scanner__welcome {
  text-transform: uppercase;
  font-size: 5rem;
  font-weight: 200; }

.scanner__bin {
  font-size: 5rem;
  font-weight: 200; }

.scanner__item {
  font-size: 2.5rem;
  font-weight: 600; }

/*# sourceMappingURL=data:application/json;base64, */